
/*1.You are working on a system that manages the inventory of a store. Each item in the inventory has a unique ID and associated information such as name, quantity, and price. The system requires a feature to search for an item by its ID. Implement a program that allows the user to create a doubly linked list of item records and perform a search operation to find a specific item by its ID.



The program should prompt the user to enter the number of items and their respective IDs. It will then create a doubly linked list with the entered item IDs. Next, the program will ask the user to enter an item ID to search for. It will perform the search operation using the searchElement function and display whether the item with the entered ID is present in the list or not.



Note: This is a sample question asked in an Amcat interview.

Input format :
The first line contains an integer n, representing the number of items in the inventory.

The next n lines contain the details of an item in the following format:

<ID>

<Name>

<Quantity>

<Price>.

The next line contains an integer searchId, representing the ID of the item to search for.

Output format :
If the item with the searched ID is present in the inventory, print "Item with ID <ID> is present in the list."

Otherwise, print "Item with ID <ID> is not found in the list."



Refer to the sample output for the exact format.

Code constraints :
The item IDs are integers and are unique within the inventory.

The item names are strings.

The item quantities are integers and represent the available quantity in stock.

The item prices are floating-point numbers.

Sample test cases :
Input 1 :
3
101
Pen
10
5.99
102
Notebook
5
12.99
103
Pencil
20
1.99
101
Output 1 :
Item with ID 101 is present in the list.
Input 2 :
2
201
Chair
8
49.99
202
Table
3
99.99
203
Output 2 :
Item with ID 203 is not found in the list.*/

// You are using GCC
#include <iostream>
#include <string>
using namespace std;
class Item {
        public:
            int id;
                string name;
                    int quantity;
                        double price;
                            Item* prev;
                                Item* next;
                                    Item(int i, const string& n, int q, double p)
                                        : id(i), name(n), quantity(q), price(p), prev(nullptr), next(nullptr) {}
};
class Inventory {
        public:
            Item* head;
                Item* tail;
                    Inventory() : head(nullptr), tail(nullptr) {}
                        void addItem(int id, const string& name, int quantity, double price) {
                                    Item* newItem = new Item(id, name, quantity, price);
                                            if (!head) {
                                                            head = newItem;
                                                                        tail = newItem;
                                            } else {
                                                            tail->next = newItem;
                                                                        newItem->prev = tail;
                                                                                    tail = newItem;
                                            }
                        }
                            bool searchItem(int searchId) {
                                        Item* current = head;
                                                while (current != nullptr) {
                                                                if (current->id == searchId) {
                                                                                    return true;
                                                                }
                                                                            current = current->next;
                                                }
                                                        return false;
                            }
};
int main() {
        int n;
            cin >> n;
                Inventory inventory;
                    for (int i = 0; i < n; i++) {
                                int id, quantity;
                                        string name;
                                                double price;
                                                        cin >> id >> name >> quantity >> price;
                                                                inventory.addItem(id, name, quantity, price);
                    }
                        int searchId;
                            cin >> searchId;
                                if (inventory.searchItem(searchId)) {
                                            cout << "Item with ID " << searchId << " is present in the list." << endl;
                                } else {
                                            cout << "Item with ID " << searchId << " is not found in the list." << endl;
                                }
                                    return 0;
}


/*2.You are tasked with implementing a system that manages a student database. The database stores student information using a doubly linked list. However, the system requires the ability to split the student database into two equal halves for better management. Your task is to write a program that splits the given doubly linked list of student names into two halves, ensuring that the student information is evenly distributed between the resulting lists. The split should be done in such a way that each resulting list maintains the original order of the student records.



Write a program that takes input in the specified format and splits the doubly linked list of student names into two halves using the "insertAtEnd" function.



Note: This is a sample question asked in Microsoft recruitment.

Input format :
The input begins with a single integer, N, representing the number of students in the database.

The following N lines contain the names of the students, one name per line.

Output format :
The program should output the following:

The first half of the student names after splitting.

The second half of the student names after splitting.

Each list should be displayed as a space-separated string of student names.

If either the first half or the second half is empty, it should be displayed as an empty string.

Code constraints :
The maximum number of students in the database is 100.

Each student's name is a string of alphanumeric characters and can have a maximum length of 100 characters.

The input list of student names cannot be empty.

Sample test cases :
Input 1 :
4
John
Emma
Michael
Sophia
Output 1 :
John Emma 
Michael Sophia 
Input 2 :
5
Alice
Bob
Claire
David
Emily
Output 2 :
Alice Bob Claire 
David Emily */


// You are using GCC
#include <iostream>
using namespace std;

class Node {
    public:
        string name;
            Node* prev;
                Node* next;
};

void insertAtEnd(Node** head, string name) {
        Node* newNode = new Node();
            newNode->name = name;
                newNode->next = nullptr;
                
                    if (*head == nullptr) {
                                newNode->prev = nullptr;
                                        *head = newNode;
                                                return;
                    }
                    
                        Node* last = *head;
                            while (last->next != nullptr) {
                                        last = last->next;
                            }
                            
                                last->next = newNode;
                                    newNode->prev = last;
}

void splitList(Node* head, Node** firstHalf, Node** secondHalf) {
        if (head == nullptr || head->next == nullptr) {
                    *firstHalf = head;
                            *secondHalf = nullptr;
                                    return;
        }
        
            Node* slow = head;
                Node* fast = head;
                
                    while (fast->next != nullptr && fast->next->next != nullptr) {
                                slow = slow->next;
                                        fast = fast->next->next;
                    }
                    
                        *firstHalf = head;
                            *secondHalf = slow->next;
                                slow->next->prev = nullptr;
                                    slow->next = nullptr;
}

void displayList(Node* head) {
        Node* current = head;
            while (current != nullptr) {
                        cout << current->name << " ";
                                current = current->next;
            }
                cout << endl;
}

int main() {
        int N;
            cin >> N;
                cin.ignore();
                
                    Node* head = nullptr;
                    
                        for (int i = 0; i < N; i++) {
                                    string name;
                                            getline(cin, name);
                                                    insertAtEnd(&head, name);
                        }
                        
                            Node* firstHalf = nullptr;
                                Node* secondHalf = nullptr;
                                
                                    splitList(head, &firstHalf, &secondHalf);
                                    
                                        displayList(firstHalf);
                                            displayList(secondHalf);
                                            
                                                return 0;
}



/*3.You are developing a web analytics tool that tracks user engagement on a website. The tool requires functionality to determine the number of unique user interactions recorded in a log file. Each user interaction is represented by a unique session ID. Implement a program that allows the user to input a log file containing session IDs representing user interactions. The program should create a doubly linked list using the session IDs from the log file and calculate the total count of unique user interactions in the list.



The program should read the log file, which consists of one session ID per line. It will then create a doubly linked list using the session IDs as the data. Next, the program will traverse the list and count the number of unique session IDs present. Finally, it will display the count as the output.



The web analytics tool will provide valuable insights to website administrators by accurately determining the number of unique user interactions, enabling them to analyze user engagement and make data-driven decisions to enhance the user experience.



Note: This is a sample question asked in an Amazon interview.

Input format :
The input begins with an integer N, representing the number of session IDs in the log file.

This is followed by N lines of strings, each containing a session ID.

Output format :
The program should output a single line containing the number of unique user interactions.

Code constraints :
The program assumes the input log file is formatted with one session ID per line.

The session IDs are alphanumeric strings.

The log file may contain duplicate session IDs.

The maximum length of a session ID is 100 characters.

The maximum number of session IDs in the log file is 1000.

Sample test cases :
Input 1 :
3
ABC123
DEF456
GHI789
Output 1 :
Number of unique user interactions: 3
Input 2 :
5
ABC123
DEF456
ABC123
JKL987
DEF456
Output 2 :
Number of unique user interactions: 3
Input 3 :
2
XYZ789
XYZ789
Output 3 :
Number of unique user interactions: 1*/



// You are using GCC

#include <iostream>
#include <fstream>
#include <string>
#include <unordered_set>

class Node {
        public:
                std::string data;
                            Node* prev;
                                            Node* next;
                                                            
                                                                                Node(const std::string& value) : data(value), prev(nullptr), next(nullptr) {}
};

class DoublyLinkedList {
        public:
                Node* head;
                            Node* tail;
                                        
                                                        DoublyLinkedList() : head(nullptr), tail(nullptr) {}
                                                                        
                                                                                            void insert(const std::string& value) {
                                                                                                                                Node* newNode = new Node(value);
                                                                                                                                                                        if (!head) {
                                                                                                                                                                                                                                    head = tail = newNode;
                                                                                                                                                                        } else {
                                                                                                                                                                                                                                    tail->next = newNode;
                                                                                                                                                                                                                                                                                                        newNode->prev = tail;
                                                                                                                                                                                                                                                                                                                                                                                        tail = newNode;
                                                                                                                                                                        }
                                                                                            }
                                                                                                                
                                                                                                                                        ~DoublyLinkedList() {
                                                                                                                                                                                while (head) {
                                                                                                                                                                                                                                        Node* temp = head;
                                                                                                                                                                                                                                                                                                        head = head->next;
                                                                                                                                                                                                                                                                                                                                                                                    delete temp;
                                                                                                                                                                                }
                                                                                                                                        }
};

int main() {
            int N;
                        std::cin >> N;
                                    
                                                    DoublyLinkedList sessionList;
                                                                        std::unordered_set<std::string> uniqueSessions;
                                                                                            
                                                                                                                    for (int i = 0; i < N; ++i) {
                                                                                                                                                            std::string sessionID;
                                                                                                                                                                                                        std::cin >> sessionID;
                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                        // Check if the session ID is unique
                                                                                                                                                                                                                                                                                                                                                                    if (uniqueSessions.find(sessionID) == uniqueSessions.end()) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    uniqueSessions.insert(sessionID);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            sessionList.insert(sessionID);
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                    }
                                                                                                                                            
                                                                                                                                                                        std::cout<<"Number of unique user interactions: "<< uniqueSessions.size() << std::endl;
                                                                                                                                                                                                    
                                                                                                                                                                                                                                    return 0;
}

/*4.You are tasked with developing a program for a task management system that utilizes a doubly linked list to track and manage tasks. Each node in the doubly linked list represents a task with a unique ID. The program should allow for inserting tasks at the front, deleting tasks from the front and end of the list, and displaying the updated list of tasks after each operation.



Implement a doubly linked list where elements can be inserted at the front and deleted from the front and end of the list. 



Note: This is a sample question asked in an Infosys interview.

Input format :
The first line contains an integer n, representing the number of elements to insert.

The next line contains n space-separated integers representing the elements to be inserted at the front of the linked list.

Output format :
The output consists of three parts:

After inserting all the elements at the front, display the elements in the linked list.

After deleting the node at the front, display the updated linked list.

After deleting the node at the end, display the final linked list.



Refer to the sample output for formatting specifications.

Code constraints :
The maximum number of elements in the list is 10^5.

Each element is an integer.

Sample test cases :
Input 1 :
5
1 2 3 4 5
Output 1 :
5 4 3 2 1 
4 3 2 1 
4 3 2 
Input 2 :
3
9 8 7
Output 2 :
7 8 9 
8 9 
8 
*/

#include <iostream>

using namespace std;

struct Node {
        int data;
            Node* prev;
                Node* next;
};

void insertAtFront(Node** head, int newData) {
        Node* newNode = new Node();
            newNode->data = newData;
                newNode->prev = nullptr;
                    newNode->next = nullptr;
                    
                        if (*head == nullptr) {
                                    *head = newNode;
                                            return;
                        }
                        
                            newNode->next = *head;
                                (*head)->prev = newNode;
                                    *head = newNode;
}

void deleteAtFront(Node** head) {
        if (*head == nullptr) {
                    return;
        }
        
            Node* temp = *head;
                *head = (*head)->next;
                    if (*head != nullptr) {
                                (*head)->prev = nullptr;
                    }
                        delete temp;
}

void deleteAtEnd(Node** head) {
        if (*head == nullptr) {
                    return;
        }
        
            Node* current = *head;
                while (current->next != nullptr) {
                            current = current->next;
                }
                
                    if (current->prev != nullptr) {
                                current->prev->next = nullptr;
                    } else {
                                *head = nullptr;
                    }
                        delete current;
}

void displayList(Node* head) {
        Node* current = head;
        
            if (current == nullptr) {
                        return;
            }
            
               // cout << "List elements: ";
                   while (current != nullptr) {
                               cout << current->data << " ";
                                       current = current->next;
                   }
                       cout << endl;
}

int main() {
        Node* head = nullptr;
            int numElements, data;
            
                cin >> numElements;
                
                    for (int i = 0; i < numElements; i++) {
                                cin >> data;
                                        insertAtFront(&head, data);
                    }
                    
                        displayList(head);
                        
                            deleteAtFront(&head);
                            
                                displayList(head);
                                
                                    deleteAtEnd(&head);
                                    
                                        displayList(head);
                                        
                                            return 0;
}


