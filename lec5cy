/*1.Shyam is participating in a coding competition and has encountered a problem related to counting the occurrences of a given number in an array. He needs your help to solve this problem efficiently using binary search.



The problem is as follows: Shyam is given an array of integers and a specific number. He wants to count the continual number of occurrences that result from this given number in the array. However, the array is sorted, which makes it easier to count the occurrences efficiently.



Write a program that takes the number of elements, the array elements, and the target number as input, and returns the count of occurrences of the target number in the array using a binary search approach.



Your task is to assist Shyam by providing a solution to the problem.



Example



Shyam wants to count the occurrences of the number 5 in the given array.



Input:

Number of elements: 10

Array elements: [1, 4, 5, 5, 5, 8, 9, 9, 10, 15 ]

Target number: 5



Output:

The number of occurrences of 5 in the array is 3.



Explanation:

The number of elements is 10, and the array of elements is [1, 4, 5, 5, 5, 8, 9, 9, 10, 15 ]. Shyam wants to count the occurrences of the number 5 in this array. The program uses binary search to efficiently count the occurrences and returns the result as 3, indicating that the number 5 appears three times in the array.

Input format :
The first line of input consists of the number of array elements, N.

The second line of input consists of N elements separated by a space.

The third line of input consists of the target element to find its continually occurring frequency.

Output format :
The output prints the frequency of the given target element.

Code constraints :
0 < N <= 800

Sample test cases :
Input 1 :
10
1 4 5 5 5 8 9 9 10 15
5
Output 1 :
3*/



// You are using GCC
#include<stdio.h>
int ffo(int arr[],int size,int target)
{
    int l=0,r=size-1,re=-1;
    while(l<=r)
    {
        int mid=l+(r-l) / 2;
        if(arr[mid]==target)
        {
            re=mid;
            r=mid-1;
        }
        else if(arr[mid],target)
        {
            l=mid+1;
        }
        else
        {
            r=mid-1;
        }
    }
    return re;
}
int flo(int arr[],int size,int target)
{
    int l=0,r=size-1,re=-1;
    while(l<=r)
    {
        int mid=l+(r-l)/2;
        if(arr[mid]==target)
        {
            re=mid;
            l=mid+1;
        }
        else if(arr[mid]<target)
        {
            l=mid+1;
        }
        else
        {
            r=mid-1;   
        }
    }
    return re;
}
int co(int arr[],int size,int target)
{
    int fo=ffo(arr,size,target);
    if(fo == -1)
    {
        return 0;
    }
    int lo=flo(arr,size,target);
    return lo-fo+1;
}
int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    int target;
    scanf("%d",&target);
    int occ=co(arr,n,target);
    printf("%d",occ);
    
    return 0;
}





/*2.You are developing a grocery store application that includes a search feature for customers to find their desired fruits. The application maintains a sorted list of available fruits in alphabetical order.



As a part of the search feature, you need to implement a function that finds the index of the first occurrence of a given fruit name in the sorted array of fruit names using binary search.



Write a function isFruitPresent() that takes in the sorted array of fruit names and the target fruit name as inputs. The function should use binary search to find the index of the first occurrence of the target fruit name in the array. If the target fruit name is not found, the function should return -1.



Note: This is a sample question asked in Infosys recruitment.

Input format :
The first line of input consists of the number of fruits n.

The second line of input consists of n fruits names in sorted order, separated by space.

The third line of input consists of the target fruit.

Output format :
If the target fruit is present in the array, print the index of the first occurrence of the fruit.

If the target fruit is not present, print "<fruit> is not found in the array".

Code constraints :
n>0

Sample test cases :
Input 1 :
3
Apple Banana Carrot
Banana
Output 1 :
The first occurrence of "Banana" is at index 1.*/




#include<stdio.h>
#include<string.h>
int isFruitPresent(char fruit[][50],int n,char target[])
{
    int l=0,r=n-1,re=-1;
    while(l<=r)
    {
        int mid=l+(r-l)/2;
        int com =strcmp(fruit[mid],target);
        if(com == 0)
        {
            re=mid;
            r=mid-1;
        }
        else if(com<0)
        {
            l=mid+1;            
        }
        else
        {
            r=mid-1;
        }
    }
    return re;
}
int main()
{
    int n;
    scanf("%d",&n);
    char fruit[n][50];
    for(int i=0;i<n;i++)
    {
        scanf("%s",fruit[i]);
    }
    char target[50];
    scanf("%s",target);
    int index=isFruitPresent(fruit,n,target);
    if (index == -1)
    {
        printf("\"%s\" is not found in the array.",target);
    }
    else
    {
        printf("The first occurrence of \"%s\" is at index %d.\n",target,index);
    }
    return 0;
}



/*3.You are working on a task management application that allows users to prioritize their tasks by assigning them positive integer values. The application maintains a sorted list of task priorities in ascending order to help users manage their workload effectively.



As a part of the task management feature, you need to implement a function that finds the smallest missing positive integer greater than a given value x in the sorted array of task priorities using binary search. This will allow users to determine the next available priority value for assigning new tasks.



Write a function findSmallestMissing() that takes in the sorted array of task priorities, the size of the array, and the given value x as inputs. The function should use binary search to find the smallest missing positive integer greater than x in the array.



Note: This is a sample question asked in TCS recruitment.

Input format :
The first line of input consists of the number of elements in the array.

The second line of input consists of array elements, separated by space.

The third line of input consists of the value of x.

Output format :
The output prints the smallest missing positive integer greater than the given value x.

Sample test cases :
Input 1 :
6
12 24 26 37 41 53
24
Output 1 :
The smallest missing positive integer greater than 24 is 25.
Input 2 :
6
12 24 24 37 41 53
52
Output 2 :
The smallest missing positive integer greater than 52 is 54.*/


// You are using GCC
#include<stdio.h>
int fsm(int pri[],int size,int x)
{
    int l=0,r=size-1,re=-1;
    while(l<=r)
    {
        int mid=l+(r-l)/2;
        if(pri[mid]>=x)
        {
            re=mid;
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    return re != -1?pri[re] : x;
}
int main()
{
    int n;
    scanf("%d",&n);
    int pri[n];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&pri[i]);
    }
    int x;
    scanf("%d",&x);
    int re=fsm(pri,n,x);
    printf("The smallest missing positive integer greater than %d is %d.\n",x,re+1);
    return 0;
}





