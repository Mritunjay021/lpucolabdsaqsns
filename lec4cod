/*1.Rajesh wants to add elements of two arrays and display the merged array. Help Rajesh by writing a program to take input for two arrays and add both array elements and display the merged array.



Note: This is a sample question asked in TCS recruitment.

Input format :
The first line of input consists of the number of elements in the first array n.

The second line of input consists of n elements, separated by space.

The third line of input consists of the number of elements in the second array m.

The fourth line of input consists of m elements, separated by space.

Output format :
The output prints added and merged array elements, separated by space.

Code constraints :
0 < n,m <= 500

Sample test cases :
Input 1 :
5
2 5 7 44 890
3
456 3 4
Output 1 :
458 8 11 44 890 */

#include<iostream>
using namespace std;
int main()
{
    int n,m,i,k,l;
    cin>>n;
    int ar1[n];
    for(i=0;i<n;i++)
    {
        cin>>ar1[i];
    }
    cin>>m;
    int ar2[m];
    if(n>m)
    {
        k=m;
        l=n;
    }
    else
    {
        k=n;
        l=m;
    }
    int ar[k];
    for(i=0;i<m;i++)
    {
        cin>>ar2[i];
    }
    for(i=0;i<k;i++)
    {
        ar[i]=ar1[i]+ar2[i];
    }
    if(n>m)
    {
        for(i=k;i<n;i++)
        {
            ar[i]=ar1[i];
        }
    }
    else
    {
        for(i=k;i<m;i++)
        {
            ar[i]=ar2[i];
        }
    }
    for(i=0;i<l;i++)
    {
        cout<<ar[i]<<" ";
    }
    return 0;
    
    
    
    
    
    
}





/*2.You are working as a software developer for an online retail company. The company has tasked you with creating a program to merge two arrays that contain product IDs. The first array, stock, represents the product IDs of items currently in stock. 



The second array, cart, represents the product IDs of items in a customer's shopping cart. Your goal is to merge these two arrays into a single, sorted list of unique product IDs.

Input format :
The first line contains the size of the first array.

The second line contains the elements of the first array, in ascending order.

The third line contains the size of the second array.

The fourth line contains the elements of the second array, in ascending order.

Output format :
The output displays the merged array, which is the ascending order of the given array.

Code constraints :
The maximum size of each array is limited to 100 (const int MAX_SIZE = 100).

The size of each array should be a positive integer.

The elements of each array can be any integer.

The code assumes that the user will input valid integers as elements of the arrays.

Sample test cases :
Input 1 :
5
-1 2 3 4 5
4
-6 7 8 9
Output 1 :
-6 -1 2 3 4 5 7 8 9 
*/



// You are using GCC
#include<stdio.h>
void mar(int stock[],int ss,int cart[],int cs,int merged[])
{
    int i=0,j=0,k=0;
    while(i<ss && j<cs)
    {
        if(stock[i]<cart[j])
            merged[k++]=stock[i++];
        else if(stock[i]>cart[j])
            merged[k++]=cart[j++];
        else
        {
            merged[k++]=stock[i++];
            j++;
        }
    }
    while(i<ss)
        merged[k++]=stock[i++];
    while(j<cs)
        merged[k++]=cart[j++];
}
int main()
{
    int ss,cs;
    scanf("%d",&ss);
    int stock[ss];
    for(int i=0;i<ss;i++)
        scanf("%d",&stock[i]);
    scanf("%d",&cs);
    int cart[cs];
    for(int i=0;i<cs;i++)
        scanf("%d",&cart[i]);
    int ms=ss+cs;
    int merged[ms];
    mar(stock,ss,cart,cs,merged);
    for(int i=0;i<ms;i++)
    {
        if(i>0 && merged[i] == merged[i-1])
            continue;
        printf("%d",merged[i]);
    }
    printf("\n");
    return 0;
        
}

/*3.At a university, two student clubs, "Tech Wizards" and "Creative Minds," have decided to merge and form a new club called "Innovative Thinkers." 



As part of the merger process, the club leaders, Alex and Sarah, need to create a program that merges the member lists of the two clubs and identifies the unique members in the merged list.



The program takes two arrays, arr1, and arr2, as inputs. Each array represents the member IDs of the respective clubs. Alex and Sarah want to combine the arrays and generate a single array, merged, containing all the unique member IDs.



To ensure a seamless merger, the program should eliminate any duplicate member IDs and only include unique IDs in the merged array. This way, they can maintain a consolidated member list without repetition.



Note: This is a sample question asked in Capgemini recruitment.

Input format :
The first line of input consists of the number of elements n in the first array.

The second line of input consists of n-sorted elements, separated by space.

The third line of input consists of the number of elements m in the second array.

The fourth line of input consists of m-sorted elements, separated by space.

Output format :
The output prints the unique elements in the merged array, separated by space.

Sample test cases :
Input 1 :
5
1 2 3 4 5
7
4 5 6 6 7 7 8
Output 1 :
1 2 3 4 5 6 7 8 */


// You are using GCC
#include<iostream>
#include<vector>
#include<set>
using namespace std;

vector<int>mergeandfilter(vector<int>&arr1,vector<int>&arr2)
{
    set<int>mergedset;
    for(int i=0;i<arr1.size();i++)
    {
        mergedset.insert(arr1[i]);
    }
    for(int i=0;i<arr2.size();i++)
    {
        mergedset.insert(arr2[i]);
    }
    vector<int>merged(mergedset.begin(),mergedset.end());
    return merged;
}
int main()
{
    int n,m;
    cin>>n;
    vector <int> arr1(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr1[i];
    }
    cin>>m;
    vector<int>arr2(m);
    for(int i=0;i<m;i++)
    {
        cin>>arr2[i];
    }
    vector<int>merged=mergeandfilter(arr1,arr2);
    for(int i=0;i<merged.size();i++)
    {
        cout<<merged[i]<<" ";
    }
    cout<<endl;
    
    return 0;
    
    
    
}


/*4.You are given a set of arrays, and you need to write a program to merge them into a single array in the order they are given. The goal is to create a new array that contains all the elements from the input arrays, maintaining the order of the elements as per the given order.

Input format :
The input will be provided as follows:

The first line contains an integer, numArrays, which represents the number of arrays to merge.

For each array, the following lines will provide the details:

The first line contains an integer, arraySize, which represents the size of the array.

The second line contains arraySize space-separated integers, representing the elements of the array.

Output format :
The output displays a single line containing the merged array.



Refer to the sample output for formatting specifications.

Code constraints :
1 ≤ numArrays ≤ 10: The number of arrays to merge.

1 ≤ arraySize ≤ 100: The size of each array

-106 ≤ elements of the arrays ≤ 106: The elements of the arrays can be integers within this range.

Sample test cases :
Input 1 :
3
4
1 2 3 4
3
5 6 7
2
8 9
Output 1 :
Merged array: 1 2 3 4 5 6 7 8 9 */



// You are using GCC
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int numar;
    scanf("%d",&numar);
    int ts=0;
    int **array=(int **)malloc(numar*sizeof(int *));
    int *size = (int *)malloc(numar*sizeof(int));
    
    for(int i=0;i<numar;i++)
    {
        int ars;
        scanf("%d",&ars);
        size[i]=ars;
        ts += ars;
        array[i]=(int *)malloc(ars*sizeof(int));
        
        for(int j=0;j<ars;j++)
        {
            scanf("%d",&array[i][j]);
        }
    }
    int *rs=(int *)malloc(ts*sizeof(int));
    int ci=0;
    for(int i=0;i<numar;i++)
    {
        for(int j=0;j<size[i];j++)
        {
            rs[ci]=array[i][j];
            ci++;
        }
    }
    printf("Merged Array: ");
    for(int i=0;i<ts;i++)
    {
        printf("%d ",rs[i]);
    }
    printf("\n");
    for(int i=0;i<numar;i++)
    {
        free(array[i]);
    }
    free(array);
    free(size);
    free(rs);
    
    return 0;
    
    
    
    
    
    
} 





/*5.Pooja is a teacher who recently conducted two exams for her students, "Mathematics" and "Science." She is working on a program to merge the scores of both exams and identify the maximum score achieved by any student.



The program takes two arrays, mathScores, and scienceScores, as inputs. Each array represents the scores of the respective subjects for all the students. Pooja wants to combine the arrays and find the maximum score obtained by any student in both exams.



By merging the arrays, Pooja can have a comprehensive view of the student's performance across both subjects and identify the highest score achieved, which can be helpful for further analysis or recognizing outstanding performance.



Note: This is a sample question asked in CTS recruitment.

Input format :
The first line of input consists of the number of elements n in the first array.

The second line of input consists of n elements, separated by space.

The third line of input consists of the number of elements m in the second array.

The fourth line of input consists of m elements, separated by space.

Output format :
The output prints the maximum element in the merged array.

Sample test cases :
Input 1 :
6
1 2 3 4 5 2
7
4 5 6 7 8 6 6
Output 1 :
8
*/

#include<stdio.h>
int main()
{
    int n,m;
    scanf("%d",&n);
    int ms[n];
    for (int i=0;i<n;i++)
    {
        scanf("%d",&ms[i]);
    }
    scanf("%d",&m);
    int ss[m];
    for(int i=0;i<m;i++)
    {
        scanf("%d",&ss[i]);
    }
    int maxs=ms[0];
    for(int i=0;i<n;i++)
    {
        if(ms[i]>maxs)
        {
            maxs=ms[i];
        }
    }
    for(int i=0;i<m;i++)
    {
        if(ss[i]>maxs)
        {
            maxs=ss[i];
        }
    }
    printf("%d\n",maxs);
    return 0;
}



