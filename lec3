/*1.You are developing a program for a data analysis company that specializes in linguistic research. The company needs a program that can reverse the order of characters in an array of words. Your task is to write a program that takes user input for the size of the array and the words in the array. The program should reverse the characters in each word of the array while preserving the order of the words, and display the updated array.

Input format :
The first line of input consists of an integer that represents the size of the array.

The next line of input consists of the characters in the array, separated by spaces.

Output format :
The program outputs a single line displaying the updated sentence with the characters reversed.

Code constraints :
The size of the array should be a positive integer.

The array can store a maximum of 100 characters.

The input characters can be any printable ASCII characters.

Sample test cases :
Input 1 :
4
A B C D
Output 1 :
Updated array: D C B A */


#include <iostream>
#include <algorithm>
using namespace std;

void reverseArray(char arr[], int size) {
    reverse(arr, arr + size);
}

int main() {
    const int MAX_SIZE = 100;
    char arr[MAX_SIZE];
    int size;

    // Input the size of the array
    cin >> size;

    // Input the characters in the array
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Call the function to reverse the array
    reverseArray(arr, size);

    // Display the updated array
    cout << "Updated array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}



/*2.Write a program to insert an element at a specific position in an array. The program should prompt the user to enter the position and the value to be inserted and then display the updated array.

Input format :
The first line of input consists of an integer, which represents the size of the array.

The second line of input consists of the elements of the array, separated by space.

The third line of input consists of an integer, which represents the position where they want to insert a new element.

The last line of input consists of an integer, which represents the value to be inserted at the specified position.

Output format :
The output displays the original array before insertion and the updated array after insertion.



Refer to the sample output for formatting specifications.

Code constraints :
Maximum size of the array (MAX_SIZE = 100).

The size of the array should be a positive integer.

The position where the user wants to insert the element should be a valid position within the array bounds (between 1 and size + 1, inclusive).

The elements of the array can be both positive and negative integers.

Sample test cases :
Input 1 :
5
1 2 3 4 5
3
10
Output 1 :
Original array: 1 2 3 4 5 
Updated array: 1 2 10 3 4 5*/

#include <iostream>

int main() {
    const int MAX_SIZE = 100; // Maximum size of the array
    int arr[MAX_SIZE]; // Array to store the elements
    int size; // Actual size of the array

    // Read the size of the array from the user
    //std::cout << "Enter the size of the array: ";
    std::cin >> size;

    // Read the elements of the array from the user
   // std::cout << "Enter the elements of the array:\n";
    for (int i = 0; i < size; i++) {
       // std::cout << "Element " << i + 1 << ": ";
        std::cin >> arr[i];
    }

    // Display the original array
    std::cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // Prompt the user to enter the position and value to be inserted
    int position, value;
   // std::cout << "Enter the position where you want to insert the element: ";
    std::cin >> position;
    //std::cout << "Enter the value to be inserted: ";
    std::cin >> value;

    // Validate the position
    if (position < 1 || position > size + 1) {
        std::cout << "Invalid position!" ;
        return 0;
    }

    // Shift the elements to the right to make space for the new element
    for (int i = size; i >= position; i--) {
        arr[i] = arr[i - 1];
    }

    // Insert the new element at the specified position
    arr[position - 1] = value;

    // Increment the size of the array
    size++;

    // Display the updated array
    std::cout << "Updated array: ";
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}





/*3.Problem Statement



Given an array of integers, write a program to rotate the array to the right by a specified number of positions. The program should prompt the user to enter the number of positions to rotate and then display the updated array.

Input format :
The first line of input contains an integer representing the size of the array.

The second line of input contains the elements of the array, separated by a space.

The last line of input contains an integer to enter the number of positions to rotate the array.

Output format :
The output displays the original array before rotation and the updated array after rotation.



Refer to the sample output for formatting specifications.

Code constraints :
Maximum size of the array (MAX_SIZE = 100).

The size of the array should be a positive integer.

The elements of the array can be any integer.

The number of positions to rotate the array can be positive

Sample test cases :
Input 1 :
6
1 2 3 4 5 6
2
Output 1 :
Original array: 1 2 3 4 5 6 
Updated array: 5 6 1 2 3 4 */



#include <iostream>

int main() {
    const int MAX_SIZE = 100; // Maximum size of the array
    int arr[MAX_SIZE]; // Array to store the integers
    int size; // Actual size of the array
    int numPositions; // Number of positions to rotate

    // Read the size of the array from the user
    std::cin >> size;

    // Read the elements of the array from the user
    for (int i = 0; i < size; i++) {
        std::cin >> arr[i];
    }

    // Display the original array
    std::cout << "Original array: ";
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    // Prompt the user to enter the number of positions to rotate
    std::cin >> numPositions;

    // Perform the rotation
    numPositions %= size; // Adjust the number of positions if it is larger than the size
    while (numPositions > 0) {
        int temp = arr[size - 1]; // Store the last element

        // Shift the elements to the right
        for (int i = size - 1; i > 0; i--) {
            arr[i] = arr[i - 1];
        }

        arr[0] = temp; // Place the stored last element at the beginning

        numPositions--;
    }

    // Display the updated array
    std::cout << "Updated array: ";
    for (int i = 0; i < size; i++) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}




/*4.Problem Statement



You are developing a program for a data processing company. The company deals with large sets of data consisting of strings. However, due to data collection methods, there may be duplicate strings in the data sets. Your task is to develop a program that removes duplicate strings from an array of strings.



Write a program that takes user input for the size of the array and the strings in the array. After removing duplicate strings, the program should display the updated array.

Input format :
The first line of input consists of an integer that represents the size of the array.

The next 'size' lines consist of the strings in the array, each on a new line.

Output format :
The program outputs a single line displaying the updated array of strings after removing duplicates.

Code constraints :
The size of the array should be a positive integer.

Each string in the array should not exceed 100 characters.

String comparison is case-sensitive.

Sample test cases :
Input 1 :
5
apple
banana
orange
banana
grape
Output 1 :
Updated array: apple banana orange grape */



#include <iostream>
#include <string>
using namespace std;

void removeDuplicates(string arr[], int& size) {
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] == arr[j]) {
                // Shift elements to fill the gap
                for (int k = j; k < size - 1; k++) {
                    arr[k] = arr[k + 1];
                }
                size--; // Decrease the size of the array
                j--;    // Adjust the index to recheck the current position
            }
        }
    }
}

int main() {
    const int MAX_SIZE = 100;
    string arr[MAX_SIZE];
    int size;

    // Input the size of the array
    cin >> size;

    // Input the strings in the array
    
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Call the function to remove duplicates
    removeDuplicates(arr, size);

    // Display the updated array
    cout << "Updated array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}





/*5.Problem Statement



The data analytics company you work for has received a dataset containing integer values. They want to analyze the data and determine the second smallest value present in the dataset. You have been assigned the task of developing a program to efficiently find and display the second smallest element in the given array.



Note: This kind of question will be helpful in clearing Capgemini recruitment.

Input format :
The first line of input prompts the user to specify the size of the array.

The second line of input prompts the user to provide the elements of the array, separated by spaces.

Output format :
The program will display the second smallest element present in the array.



Refer to the sample input and output formatting specifications.

Code constraints :
The array size will be between 2 and 100 (inclusive).

The array will contain unique integer values.

Sample test cases :
Input 1 :
5
4 2 7 1 3
Output 1 :
Second Smallest Element: 2*/


#include <iostream>
#include <climits>
using namespace std;

const int MAX_SIZE = 100;

int findSecondSmallest(int arr[], int size) {
    int smallest = INT_MAX;
    int secondSmallest = INT_MAX;

    // Find the smallest and second smallest elements in the array
    for (int i = 0; i < size; i++) {
        if (arr[i] < smallest) {
            secondSmallest = smallest;
            smallest = arr[i];
        } else if (arr[i] < secondSmallest && arr[i] != smallest) {
            secondSmallest = arr[i];
        }
    }

    return secondSmallest;
}

int main() {
    int arr[MAX_SIZE];
    int size;

    // Input the size of the array
    cin >> size;

    // Input the elements of the array
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Call the function to find the second smallest element
    int secondSmallest = findSecondSmallest(arr, size);

    // Display the second smallest element
    cout << "Second Smallest Element: " << secondSmallest << endl;

    return 0;
}