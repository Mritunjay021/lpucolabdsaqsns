/*1.You are developing a text analysis tool for a language processing system. As part of the system, you need to implement a feature that determines whether a specific word is present in a given sentence.



Write a program that prompts the user to enter a sentence and a target word using linear search. Write a function called isWordPresent() to search for the target word within the sentence. If the target word is found, the program should display a message indicating its presence. Otherwise, it should display a message indicating that the target word is not present in the given sentence.



This feature will assist in text analysis tasks, allowing users to quickly determine the presence of specific words within sentences. It provides a foundation for more advanced language processing operations and enables efficient search and analysis of text data.



Note: This is a sample question asked in a Capgemini recruitment.

Input format :
The first line of input consists of the sentence.

The second line of input consists of the word to search for in the sentence.

Output format :
The output prints whether the given word is present in the sentence or not.



Refer to the sample output for the exact format.

Sample test cases :
Input 1 :
Constellations of stars, murals on city walls
stars
Output 1 :
The word 'stars' is present in the given sentence.*/



#include<iostream>
#include<string>
using namespace std;
bool Function(const string& sen, const string& target){
    size_t found = sen.find(target);
    return(found!=string::npos);
}
int main()
{
    string sen,t;
    getline(cin,sen);
    cin>>t;
    if(Function(sen,t))
    {
        cout<<"The word ' "<<t<<" ' is present in the given sentence."<<endl;
    }
    else{
        cout<<"The word ' "<<t<<" ' is not present in the given sentence."<<endl;
    }
    return 0;
}



/*2.Dhiya is working on a project that involves building a music playlist generator. The generator takes user preferences and creates a playlist based on those preferences. As part of the playlist generation process, you need to find the appropriate position to insert a new song in an existing sorted playlist array.



Implement the binary search to find the index where the new song should be inserted into the playlist array, maintaining the sorted order (ascending order). If the song with the same duration already exists in the playlist, return its index. If not, return the index where the song should be inserted to maintain the sorted order (ascending order).



Example 1:

Input: 

nums = [1, 3, 5, 6], target = 5

Output: 2



Example 2:

Input: 

nums = [6, 1, 3, 5, 6, 8, 10], target = 12

Output: 6



Example 3:

Input: nums = [1, 3, 5, 6], target = 4

Output: 2



Note: Use the dynamic memory allocation

Input format :
The first line of the input consists of N, representing the size of the music playlist.

The second line of the input contains the N values, which represent the songs separated by spaces.

The last line of the input specifies the index of the song to be printed from the playlist.

Output format :
If the song with the specified duration is already present in the playlist, the output will return the index of that song.

If the song is not found in the playlist, the output will return the index where the song should be inserted to maintain the ascending order of the playlist.



Refer to the sample output for formatting specifications.

Code constraints :
1 <= length of the array <= 500

numbers >= 0

Numbers contain distinct values sorted in ascending order.

target <= 1000 (which song's index to be printed)

Sample test cases :
Input 1 :
4
1 3 5 6
5
Output 1 :
2*/




// You are using GCC
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;

    cin >> n;
    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int valueToFind;

    cin >> valueToFind;
    int indexToInsert = -1;
    for (int i = 0; i < n; i++) {
        if (arr[i] == valueToFind) {
            cout << i << endl;
            return 0;
        }
        if (arr[i] > valueToFind) {
            indexToInsert = i;
            break;
        }
    }
    if (indexToInsert == -1) {
        indexToInsert = n; // If not found, insert at the end.
    }
    cout << indexToInsert << endl;
    return 0;
}
